WSGISocketPrefix run/wsgi
WSGIRestrictStdout On
WSGIRestrictSignal Off
WSGIPythonOptimize 1
WSGIPassAuthorization On
WSGIDaemonProcess pagure user=git group=git maximum-requests=1000 display-name=pagure processes=4 threads=4 inactivity-timeout=300
## It is important that the doc server runs in a different apache process
WSGIDaemonProcess paguredocs user=git group=git maximum-requests=1000 display-name=pagure processes=4 threads=4 inactivity-timeout=300

<VirtualHost *:80>
  ServerName {{ domain }}
  Redirect permanent / https://pagure.io/
</VirtualHost>


<VirtualHost *:80>
  ServerName docs.{{ domain }}
  Redirect permanent / https://docs.{{ domain }}/
</VirtualHost>


<VirtualHost *:443>
  ServerName docs.pagure.org

  WSGIScriptAlias / /usr/share/pagure/docs_pagure.wsgi

  SSLEngine on
  #SSLProtocol all -SSLv2 -SSLv3
  ## Use secure TLSv1.1 and TLSv1.2 ciphers
  #Header always add Strict-Transport-Security "max-age=15768000; includeSubDomains; preload"

  #SSLCertificateFile /etc/pki/tls/....crt
  #SSLCertificateChainFile /etc/pki/tls/....intermediate.crt
  #SSLCertificateKeyFile /etc/pki/tls/....key

  Alias /static /usr/local/lib/python2.7/dist-packages/pagure-3.2.1-py2.7.egg/pagure/static/

  <Location />
    WSGIProcessGroup paguredocs
    <IfModule mod_authz_core.c>
      ## Apache 2.4
      Require all granted
    </IfModule>
    <IfModule !mod_authz_core.c>
      ## Apache 2.2
      Order deny,allow
      Allow from all
    </IfModule>
   </Location>
</VirtualHost>


<VirtualHost *:443>
  ServerName {{ domain }}
  WSGIScriptAlias / /usr/share/pagure/pagure.wsgi

  SSLEngine on
  SSLProtocol all -SSLv2 -SSLv3
  ## Use secure TLSv1.1 and TLSv1.2 ciphers
  #Header always add Strict-Transport-Security "max-age=15768000; includeSubDomains; preload"

  #SSLCertificateFile /etc/pki/tls/....crt
  #SSLCertificateChainFile /etc/pki/tls/....intermediate.crt
  #SSLCertificateKeyFile /etc/pki/tls/....key

  Alias /static /usr/local/lib/python2.7/dist-packages/pagure-3.2.1-py2.7.egg/pagure/static/
  Alias /releases /var/www/releases

  ## Section used to support cloning git repo over http (https in this case)
  SetEnv GIT_PROJECT_ROOT {{ git_home }}/repositories

  AliasMatch ^/(.*/objects/[0-9a-f]{2}/[0-9a-f]{38})$          {{ git_home }}/repositories/$1
  AliasMatch ^/(.*/objects/pack/pack-[0-9a-f]{40}.(pack|idx))$ {{ git_home }}/repositories/$1
  ScriptAliasMatch \
    "(?x)^/(.*/(HEAD | \
    info/refs | \
    objects/info/[^/]+ | \
    git-(upload|receive)-pack))$" \
    /usr/libexec/git-core/git-http-backend/$1

  <Location />
   WSGIProcessGroup pagure
   <IfModule mod_authz_core.c>
      # Apache 2.4
      Require all granted
   </IfModule>
   <IfModule !mod_authz_core.c>
      # Apache 2.2
      Order deny,allow
      Allow from all
   </IfModule>
  </Location>

  ## Folder where are stored the tarball of the releases
  <Location /releases>
   WSGIProcessGroup pagure
   <IfModule mod_authz_core.c>
      # Apache 2.4
      Require all granted
   </IfModule>
   <IfModule !mod_authz_core.c>
       # Apache 2.2
      Order deny,allow
      Allow from all
   </IfModule>
  </Location>

  #<Directory /var/www/releases>
    #Options +Indexes
  #</Directory>

#</VirtualHost>

